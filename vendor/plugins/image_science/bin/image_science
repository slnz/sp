#!/usr/bin/env ruby
#
# = Usage
#
# image_science [OPTIONS] [command] [param ...] [file]
#
# == Options
#
# -h, --help:
#
# show help
#
# -i, --input
#
# specify input file.
# by default input is read from stdin.
# if stdin is attached to a tty, the last argument is used as a filename.
# e.g. image_science info pic.jpg
#
# -o, --output
#
# specify output file.
# by default output is written to stdout, or a file named 'output'
# if stdout is attached to a tty.
#
# -d, --debug:
#
# debug mode
#
# == Commands
#
# The following commands are recognised
# 
# * info
# * histogram
# * get_version
# * resize <width> <height>
# * crop <left> <top> <right> <bottom>
# * get_pixel_color <x> <y>
# * set_pixel_color <x> <y> <red> <green> <blue> [<alpha>]
# * adjust_gamma <value>      
# * adjust_brightness <value>
# * adjust_contrast <value>  
# * invert
# * thumbnail <size>
# * cropped_thumbnail <size>
# * flip_vertical
# * flip_horizontal
# * rotate <angle> [<x_shift> <y_shift> <x_origin> <y_origin> <use_mask>]
#
# Refer to the ImageScience documentation for allowed value ranges.
#
# = Examples
#
#  # convert an image from one format to another
#  > image_science -i pix.jpg -o pix.gif
#
#  # create a thumbnail of size 100 pixels from pix.jpg, writes to 'output':
#  > image_science thumbnail 100 pix.jpg
#
#  # as above, but create a png named pix_thumb.png:
#  > image_science thumbnail 100 pix.jpg -o pix_thumb.png
#
#  # resize to 200x100, increase brightness by 30%, save as png:
#  > image_science resize 200 100 pix.jpg | image_science adjust_brightness 30 -o pix_new.png
#
#  # display effects of gamma adjustments on pixel color (writes to 'output'):
#  > image_science get_pixel_color 0 0 pix.jpg | image_science adjust_gamma 0.5 | image_science get_pixel_color 0 0

require 'rubygems'
require File.dirname(__FILE__) + '/../lib/image_science'
require 'getoptlong'

ARG_SPEC = [ [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
             [ '--test', '-n', GetoptLong::NO_ARGUMENT ],
             [ '--input', '-i', GetoptLong::REQUIRED_ARGUMENT ],
             [ '--output', '-o', GetoptLong::REQUIRED_ARGUMENT ],
             [ '--debug', '-d', GetoptLong::NO_ARGUMENT ],
           ]

private

# parse command line arguments
def command_line_options
  opts = GetoptLong.new(*ARG_SPEC)
  options = {}
  opts.each do |opt,arg|
    opt[0,2] = ''
    opt = opt.to_sym
    case opt
    when :help
      puts usage("[param ...]")
      exit 0
    else
      options[opt] = arg ? arg : true
    end
  end
  options
end

def process_data(opts)
  if input = opts[:input]
    method = :with_image
  else
    method = :with_image_from_memory
    input = STDIN.binmode.read
  end

  output = opts[:output] || ($stdout.tty? ? "output" : nil)

  ImageScience.send(method, input) do |i|
    yield i if block_given?
    if @changed || !$stdout.tty? || opts[:output]
      if output
        i.save(output)
      else
        $stdout.sync = true
        print i.data
      end
    end
  end
end

def usage(bonus_args = nil)
  cmd = @command || "[command]"
  usage = ["usage: image_science [OPTIONS]", cmd, bonus_args, "[image_file]"].
    compact.join(" ")
  
  if !@command
    re = Regexp.new('== Commands(.*?)= Examples', Regexp::MULTILINE)
    commands = $1.gsub(/#/, '') if File.read(__FILE__).match(re)
    usage += commands.sub(/[\n\s]+\z/, '') + "\n\n"
  end
  
  usage
end

def expect_params(required, optional = [])
  required = [required] unless required.kind_of?(Array)
  pl = @params.length
  
  if (pl < required.length) || (pl > required.length + optional.length) ||
      @params.any? { |i| i.nil? }
    usage_str = required.join(" ")
    usage_str += " [%s]" % optional.join(" ") unless optional.empty?
    raise usage(usage_str)
  end
  (@params.length == 1) ? @params[0] : @params
end

begin
  opts = command_line_options
  @command, *params = ARGV
  opts[:input] = params.pop if !opts[:input] && $stdin.tty?
  @params = params.collect { |i| i ? i.to_f : nil }

  unless @command || (opts[:input] || opts[:output])
    puts usage("[param ...]")
    exit 1
  end

  # Note: using warn for string output so that image data can be chained
  # through on the command line.
  case @command
  when nil  # no command, just use -i and -o
    process_data(opts)
  when 'info'
    process_data(opts) do |i|
      warn <<EOM
image type: #{i.image_type}
dimensions: #{i.width} x #{i.height}
colorspace: #{i.colorspace}
     depth: #{i.depth}
EOM
    end
  when 'histogram'
    process_data(opts) { |i| warn i.histogram.inspect }
  when 'get_version'
    warn "FreeImage #{ImageScience.get_version}"
  when 'resize'
    w, h = expect_params(%W{<width> <height>})
    process_data(opts) { |i| i.send(@command, w, h); @changed = true }
  when 'get_pixel_color'
    x, y = expect_params(%W{<x> <y>})
    process_data(opts) { |i| warn i.get_pixel_color(x, y).inspect }
  when 'set_pixel_color'
    x, y, *rgb = expect_params(%W{<x> <y> <red> <green> <blue>}, %W{<alpha>})
    process_data(opts) { |i| i.set_pixel_color(x, y, rgb); @changed = true }
  when /^adjust_/
    value = expect_params("<value>")
    process_data(opts) { |i| i.send(@command, value); @changed = true }
  when 'invert', 'flip_vertical', 'flip_horizontal'
    process_data(opts) { |i| i.send(@command); @changed = true }
  when 'thumbnail', 'cropped_thumbnail'
    value = expect_params("<size>")
    process_data(opts) { |i| i.send(@command, value); @changed = true }
  when 'crop'
    l, r, t, b = expect_params(%W{<left> <top> <right> <bottom>})
    process_data(opts) { |i| i.crop(l, r, t, b); @changed = true }
  when 'rotate'
    a, *args = expect_params("<angle>", %W{<x_shift> <y_shift> <x_origin>
                                           <y_origin> <use_mask>})
    process_data(opts) do |i|
      args.empty? ? i.rotate(a) : i.rotate(a, *args)
      @changed = true
    end
  else
    raise "unrecognised command '#{@command}'"
  end

rescue SystemExit
rescue Interrupt
  warn ""
rescue Exception => e
  warn "ERROR: #{e.message}"
  if opts && opts[:debug]
    bt = e.backtrace
    bt = bt.join("\n") if bt.kind_of?(Array)
    warn bt
  end
end
